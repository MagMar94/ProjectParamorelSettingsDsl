/*
 * generated by Xtext 2.16.0
 */
package org.xtext.projectparamorel.dsl.generator

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.xtext.projectparamorel.dsl.dsl.Metric
import hvl.projectparmorel.ml.Preferences

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DslGenerator extends AbstractGenerator {

	@Inject extension IQualifiedNameProvider
	
	Preferences p = new Preferences();

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.allContents.toIterable.filter(Metric)) {
			if(e.state.equals("reward")){
				p.setRewardPreference(e.name, e.weight);
			} else if (e.state.equals("punish")){
				p.setPunishPreference(e.name, e.weight);
			}
			
			fsa.generateFile(e.fullyQualifiedName.toString("/") + ".java", e.compile)
		}
		p.saveToFile();
	}

	def CharSequence compile(Metric m) '''
		«IF m.eContainer.fullyQualifiedName !== null»
			package «m.eContainer.fullyQualifiedName»;
		«ENDIF»
		
		public class «m.name» {
			private String option= «m.state»;
			private int weight = «m.weight»;
		}
	'''
}

		
