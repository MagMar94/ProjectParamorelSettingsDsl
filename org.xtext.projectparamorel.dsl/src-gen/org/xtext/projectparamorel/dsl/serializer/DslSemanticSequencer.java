/*
 * generated by Xtext 2.16.0
 */
package org.xtext.projectparamorel.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.projectparamorel.dsl.dsl.DslPackage;
import org.xtext.projectparamorel.dsl.dsl.Preference;
import org.xtext.projectparamorel.dsl.dsl.Score;
import org.xtext.projectparamorel.dsl.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DslPackage.PREFERENCE:
				sequence_Preference(context, (Preference) semanticObject); 
				return; 
			case DslPackage.SCORE:
				sequence_Score(context, (Score) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Preference returns Preference
	 *
	 * Constraint:
	 *     scores+=Score+
	 */
	protected void sequence_Preference(ISerializationContext context, Preference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Score returns Score
	 *
	 * Constraint:
	 *     (category=StateOption feature=QualifiedName value=INT)
	 */
	protected void sequence_Score(ISerializationContext context, Score semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SCORE__CATEGORY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SCORE__CATEGORY));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SCORE__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SCORE__FEATURE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SCORE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SCORE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getScoreAccess().getCategoryStateOptionParserRuleCall_0_0(), semanticObject.getCategory());
		feeder.accept(grammarAccess.getScoreAccess().getFeatureQualifiedNameParserRuleCall_1_0(), semanticObject.getFeature());
		feeder.accept(grammarAccess.getScoreAccess().getValueINTTerminalRuleCall_4_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
