/*
 * generated by Xtext 2.16.0
 */
package org.xtext.projectparamorel.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ExperienceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projectparamorel.dsl.Dsl.Experience");
		private final Assignment cEntriesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntriesEntryParserRuleCall_0 = (RuleCall)cEntriesAssignment.eContents().get(0);
		
		//Experience:
		//	entries+=Entry*;
		@Override public ParserRule getRule() { return rule; }
		
		//entries+=Entry*
		public Assignment getEntriesAssignment() { return cEntriesAssignment; }
		
		//Entry
		public RuleCall getEntriesEntryParserRuleCall_0() { return cEntriesEntryParserRuleCall_0; }
	}
	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projectparamorel.dsl.Dsl.Entry");
		private final RuleCall cMetricParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Entry:
		//	Metric;
		@Override public ParserRule getRule() { return rule; }
		
		//Metric
		public RuleCall getMetricParserRuleCall() { return cMetricParserRuleCall; }
	}
	public class MetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projectparamorel.dsl.Dsl.Metric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPreferencesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStateStateOptionParserRuleCall_5_0 = (RuleCall)cStateAssignment_5.eContents().get(0);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameQualifiedNameParserRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Keyword cByKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cAKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cWeightKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cOfKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cWeightAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cWeightINTTerminalRuleCall_11_0 = (RuleCall)cWeightAssignment_11.eContents().get(0);
		private final Keyword cFullStopKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Metric:
		//	'I' 'want' 'my' 'preferences' 'to' state=StateOption name=QualifiedName 'by' 'a' 'weight' 'of' weight=INT '.';
		@Override public ParserRule getRule() { return rule; }
		
		//'I' 'want' 'my' 'preferences' 'to' state=StateOption name=QualifiedName 'by' 'a' 'weight' 'of' weight=INT '.'
		public Group getGroup() { return cGroup; }
		
		//'I'
		public Keyword getIKeyword_0() { return cIKeyword_0; }
		
		//'want'
		public Keyword getWantKeyword_1() { return cWantKeyword_1; }
		
		//'my'
		public Keyword getMyKeyword_2() { return cMyKeyword_2; }
		
		//'preferences'
		public Keyword getPreferencesKeyword_3() { return cPreferencesKeyword_3; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//state=StateOption
		public Assignment getStateAssignment_5() { return cStateAssignment_5; }
		
		//StateOption
		public RuleCall getStateStateOptionParserRuleCall_5_0() { return cStateStateOptionParserRuleCall_5_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_6_0() { return cNameQualifiedNameParserRuleCall_6_0; }
		
		//'by'
		public Keyword getByKeyword_7() { return cByKeyword_7; }
		
		//'a'
		public Keyword getAKeyword_8() { return cAKeyword_8; }
		
		//'weight'
		public Keyword getWeightKeyword_9() { return cWeightKeyword_9; }
		
		//'of'
		public Keyword getOfKeyword_10() { return cOfKeyword_10; }
		
		//weight=INT
		public Assignment getWeightAssignment_11() { return cWeightAssignment_11; }
		
		//INT
		public RuleCall getWeightINTTerminalRuleCall_11_0() { return cWeightINTTerminalRuleCall_11_0; }
		
		//'.'
		public Keyword getFullStopKeyword_12() { return cFullStopKeyword_12; }
	}
	public class StateOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projectparamorel.dsl.Dsl.StateOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRewardKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPunishKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//StateOption:
		//	'reward' | 'punish';
		@Override public ParserRule getRule() { return rule; }
		
		//'reward' | 'punish'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'reward'
		public Keyword getRewardKeyword_0() { return cRewardKeyword_0; }
		
		//'punish'
		public Keyword getPunishKeyword_1() { return cPunishKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projectparamorel.dsl.Dsl.QualifiedName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDeletionKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cShorterSequencesOfActionsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLongerSequencesOfActionsKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRepairingLowerInTheContextHierarchiesKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cRepairingHigherInTheContextHierarchiesKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cModificationOfTheOriginalModelKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//QualifiedName:
		//	'deletion' | 'shorterSequencesOfActions' | 'longerSequencesOfActions' | 'repairingLowerInTheContextHierarchies' |
		//	'repairingHigherInTheContextHierarchies' | 'modificationOfTheOriginalModel';
		@Override public ParserRule getRule() { return rule; }
		
		//'deletion' | 'shorterSequencesOfActions' | 'longerSequencesOfActions' | 'repairingLowerInTheContextHierarchies' |
		//'repairingHigherInTheContextHierarchies' | 'modificationOfTheOriginalModel'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'deletion'
		public Keyword getDeletionKeyword_0() { return cDeletionKeyword_0; }
		
		//'shorterSequencesOfActions'
		public Keyword getShorterSequencesOfActionsKeyword_1() { return cShorterSequencesOfActionsKeyword_1; }
		
		//'longerSequencesOfActions'
		public Keyword getLongerSequencesOfActionsKeyword_2() { return cLongerSequencesOfActionsKeyword_2; }
		
		//'repairingLowerInTheContextHierarchies'
		public Keyword getRepairingLowerInTheContextHierarchiesKeyword_3() { return cRepairingLowerInTheContextHierarchiesKeyword_3; }
		
		//'repairingHigherInTheContextHierarchies'
		public Keyword getRepairingHigherInTheContextHierarchiesKeyword_4() { return cRepairingHigherInTheContextHierarchiesKeyword_4; }
		
		//'modificationOfTheOriginalModel'
		public Keyword getModificationOfTheOriginalModelKeyword_5() { return cModificationOfTheOriginalModelKeyword_5; }
	}
	
	
	private final ExperienceElements pExperience;
	private final EntryElements pEntry;
	private final MetricElements pMetric;
	private final StateOptionElements pStateOption;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pExperience = new ExperienceElements();
		this.pEntry = new EntryElements();
		this.pMetric = new MetricElements();
		this.pStateOption = new StateOptionElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.projectparamorel.dsl.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Experience:
	//	entries+=Entry*;
	public ExperienceElements getExperienceAccess() {
		return pExperience;
	}
	
	public ParserRule getExperienceRule() {
		return getExperienceAccess().getRule();
	}
	
	//Entry:
	//	Metric;
	public EntryElements getEntryAccess() {
		return pEntry;
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}
	
	//Metric:
	//	'I' 'want' 'my' 'preferences' 'to' state=StateOption name=QualifiedName 'by' 'a' 'weight' 'of' weight=INT '.';
	public MetricElements getMetricAccess() {
		return pMetric;
	}
	
	public ParserRule getMetricRule() {
		return getMetricAccess().getRule();
	}
	
	//StateOption:
	//	'reward' | 'punish';
	public StateOptionElements getStateOptionAccess() {
		return pStateOption;
	}
	
	public ParserRule getStateOptionRule() {
		return getStateOptionAccess().getRule();
	}
	
	//QualifiedName:
	//	'deletion' | 'shorterSequencesOfActions' | 'longerSequencesOfActions' | 'repairingLowerInTheContextHierarchies' |
	//	'repairingHigherInTheContextHierarchies' | 'modificationOfTheOriginalModel';
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
