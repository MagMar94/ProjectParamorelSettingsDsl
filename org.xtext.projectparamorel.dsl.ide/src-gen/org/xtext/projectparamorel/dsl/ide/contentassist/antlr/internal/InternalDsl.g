/*
 * generated by Xtext 2.16.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.projectparamorel.dsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.projectparamorel.dsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.projectparamorel.dsl.services.DslGrammarAccess;

}
@parser::members {
	private DslGrammarAccess grammarAccess;

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleExperience
entryRuleExperience
:
{ before(grammarAccess.getExperienceRule()); }
	 ruleExperience
{ after(grammarAccess.getExperienceRule()); } 
	 EOF 
;

// Rule Experience
ruleExperience 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExperienceAccess().getEntriesAssignment()); }
		(rule__Experience__EntriesAssignment)*
		{ after(grammarAccess.getExperienceAccess().getEntriesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEntry
entryRuleEntry
:
{ before(grammarAccess.getEntryRule()); }
	 ruleEntry
{ after(grammarAccess.getEntryRule()); } 
	 EOF 
;

// Rule Entry
ruleEntry 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEntryAccess().getMetricParserRuleCall()); }
		ruleMetric
		{ after(grammarAccess.getEntryAccess().getMetricParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMetric
entryRuleMetric
:
{ before(grammarAccess.getMetricRule()); }
	 ruleMetric
{ after(grammarAccess.getMetricRule()); } 
	 EOF 
;

// Rule Metric
ruleMetric 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMetricAccess().getGroup()); }
		(rule__Metric__Group__0)
		{ after(grammarAccess.getMetricAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStateOption
entryRuleStateOption
:
{ before(grammarAccess.getStateOptionRule()); }
	 ruleStateOption
{ after(grammarAccess.getStateOptionRule()); } 
	 EOF 
;

// Rule StateOption
ruleStateOption 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateOptionAccess().getAlternatives()); }
		(rule__StateOption__Alternatives)
		{ after(grammarAccess.getStateOptionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getAlternatives()); }
		(rule__QualifiedName__Alternatives)
		{ after(grammarAccess.getQualifiedNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateOption__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateOptionAccess().getRewardKeyword_0()); }
		'reward'
		{ after(grammarAccess.getStateOptionAccess().getRewardKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getStateOptionAccess().getPunishKeyword_1()); }
		'punish'
		{ after(grammarAccess.getStateOptionAccess().getPunishKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getDeletionKeyword_0()); }
		'deletion'
		{ after(grammarAccess.getQualifiedNameAccess().getDeletionKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getQualifiedNameAccess().getShorterSequencesOfActionsKeyword_1()); }
		'shorterSequencesOfActions'
		{ after(grammarAccess.getQualifiedNameAccess().getShorterSequencesOfActionsKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getQualifiedNameAccess().getLongerSequencesOfActionsKeyword_2()); }
		'longerSequencesOfActions'
		{ after(grammarAccess.getQualifiedNameAccess().getLongerSequencesOfActionsKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getQualifiedNameAccess().getRepairingLowerInTheContextHierarchiesKeyword_3()); }
		'repairingLowerInTheContextHierarchies'
		{ after(grammarAccess.getQualifiedNameAccess().getRepairingLowerInTheContextHierarchiesKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getQualifiedNameAccess().getRepairingHigherInTheContextHierarchiesKeyword_4()); }
		'repairingHigherInTheContextHierarchies'
		{ after(grammarAccess.getQualifiedNameAccess().getRepairingHigherInTheContextHierarchiesKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getQualifiedNameAccess().getModificationOfTheOriginalModelKeyword_5()); }
		'modificationOfTheOriginalModel'
		{ after(grammarAccess.getQualifiedNameAccess().getModificationOfTheOriginalModelKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metric__Group__0__Impl
	rule__Metric__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetricAccess().getIKeyword_0()); }
	'I'
	{ after(grammarAccess.getMetricAccess().getIKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metric__Group__1__Impl
	rule__Metric__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetricAccess().getWantKeyword_1()); }
	'want'
	{ after(grammarAccess.getMetricAccess().getWantKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metric__Group__2__Impl
	rule__Metric__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetricAccess().getMyKeyword_2()); }
	'my'
	{ after(grammarAccess.getMetricAccess().getMyKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metric__Group__3__Impl
	rule__Metric__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetricAccess().getPreferencesKeyword_3()); }
	'preferences'
	{ after(grammarAccess.getMetricAccess().getPreferencesKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metric__Group__4__Impl
	rule__Metric__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetricAccess().getToKeyword_4()); }
	'to'
	{ after(grammarAccess.getMetricAccess().getToKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metric__Group__5__Impl
	rule__Metric__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetricAccess().getStateAssignment_5()); }
	(rule__Metric__StateAssignment_5)
	{ after(grammarAccess.getMetricAccess().getStateAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metric__Group__6__Impl
	rule__Metric__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetricAccess().getNameAssignment_6()); }
	(rule__Metric__NameAssignment_6)
	{ after(grammarAccess.getMetricAccess().getNameAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metric__Group__7__Impl
	rule__Metric__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetricAccess().getByKeyword_7()); }
	'by'
	{ after(grammarAccess.getMetricAccess().getByKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metric__Group__8__Impl
	rule__Metric__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetricAccess().getAKeyword_8()); }
	'a'
	{ after(grammarAccess.getMetricAccess().getAKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metric__Group__9__Impl
	rule__Metric__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetricAccess().getWeightKeyword_9()); }
	'weight'
	{ after(grammarAccess.getMetricAccess().getWeightKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metric__Group__10__Impl
	rule__Metric__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetricAccess().getOfKeyword_10()); }
	'of'
	{ after(grammarAccess.getMetricAccess().getOfKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metric__Group__11__Impl
	rule__Metric__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetricAccess().getWeightAssignment_11()); }
	(rule__Metric__WeightAssignment_11)
	{ after(grammarAccess.getMetricAccess().getWeightAssignment_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metric__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetricAccess().getFullStopKeyword_12()); }
	'.'
	{ after(grammarAccess.getMetricAccess().getFullStopKeyword_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Experience__EntriesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExperienceAccess().getEntriesEntryParserRuleCall_0()); }
		ruleEntry
		{ after(grammarAccess.getExperienceAccess().getEntriesEntryParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__StateAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMetricAccess().getStateStateOptionParserRuleCall_5_0()); }
		ruleStateOption
		{ after(grammarAccess.getMetricAccess().getStateStateOptionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__NameAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMetricAccess().getNameQualifiedNameParserRuleCall_6_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getMetricAccess().getNameQualifiedNameParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__WeightAssignment_11
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMetricAccess().getWeightINTTerminalRuleCall_11_0()); }
		RULE_INT
		{ after(grammarAccess.getMetricAccess().getWeightINTTerminalRuleCall_11_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
